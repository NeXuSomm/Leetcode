class Solution:
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        maxLength = 1
        start = 0
        for i in range(n):
            for j in range(i, n):
                flag = 1
                for k in range(0, ((j - i) // 2) + 1):
                    if s[i + k] != s[j - k]:
                        flag = 0
                if flag != 0 and (j - i + 1) > maxLength:
                    start = i
                    maxLength = j - i + 1
        return s[start:start + maxLength]




------------------------------------------------------------DP Solution-------------------------------------------------------------------------
class Solution:
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        if n == 0:
            return ""
        
        # Initialize a table to store whether substrings are palindromes
        dp = [[False] * n for _ in range(n)]
        start, max_length = 0, 1
        
        # All substrings of length 1 are palindromes
        for i in range(n):
            dp[i][i] = True
            
        # Check substrings of length 2
        for i in range(n - 1):
            if s[i] == s[i + 1]:
                dp[i][i + 1] = True
                start = i
                max_length = 2
        
        # Check substrings of length > 2
        for length in range(3, n + 1):
            for i in range(n - length + 1):
                j = i + length - 1
                if s[i] == s[j] and dp[i + 1][j - 1]:
                    dp[i][j] = True
                    if length > max_length:
                        start = i
                        max_length = length
        
        return s[start:start + max_length]


